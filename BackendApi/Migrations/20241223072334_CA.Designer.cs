// <auto-generated />
using System;
using BackendApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendApi.Migrations
{
    [DbContext(typeof(CarAdsContext))]
    [Migration("20241223072334_CA")]
    partial class CA
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendApi.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId")
                        .HasName("PK__Cars__68A0340E987F0CA0");

                    b.HasIndex("ListingId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("BackendApi.Models.CarCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentCategoryID");

                    b.HasKey("CategoryId")
                        .HasName("PK__CarCateg__19093A2B04FC472C");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__CarCateg__8517B2E010E38D26")
                        .IsUnique();

                    b.ToTable("CarCategories");
                });

            modelBuilder.Entity("BackendApi.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavoriteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteId")
                        .HasName("PK__Favorite__CE74FAF5E442F3AA");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("BackendApi.Models.Listing", b =>
                {
                    b.Property<int>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListingId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsExchangeable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ListingId")
                        .HasName("PK__Listings__BF3EBEF04AC97539");

                    b.HasIndex("UserId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("BackendApi.Models.ListingCategory", b =>
                {
                    b.Property<int>("ListingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ListingCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListingCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    b.HasKey("ListingCategoryId")
                        .HasName("PK__ListingC__CEC5D22908B635D0");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingCategories");
                });

            modelBuilder.Entity("BackendApi.Models.ListingImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    b.HasKey("ImageId")
                        .HasName("PK__ListingI__7516F4ECDFB0D065");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingImages");
                });

            modelBuilder.Entity("BackendApi.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__E7FEA477E1DBAD69");

                    b.HasIndex("ListingId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BackendApi.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ListingId")
                        .HasColumnType("int")
                        .HasColumnName("ListingID");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverID");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderID");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C037C1C003C8E");

                    b.HasIndex("ListingId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BackendApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC714EEAE8");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534F47513C1")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendApi.Models.UserReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReviewedUserId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewedUserID");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewerID");

                    b.HasKey("ReviewId")
                        .HasName("PK__UserRevi__74BC79AEAA5E7EED");

                    b.HasIndex("ReviewedUserId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("BackendApi.Models.Car", b =>
                {
                    b.HasOne("BackendApi.Models.Listing", "Listing")
                        .WithMany("Cars")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__Cars__ListingID__403A8C7D");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("BackendApi.Models.CarCategory", b =>
                {
                    b.HasOne("BackendApi.Models.CarCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK__CarCatego__Paren__59FA5E80");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BackendApi.Models.Favorite", b =>
                {
                    b.HasOne("BackendApi.Models.Listing", "Listing")
                        .WithMany("Favorites")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__Listi__4D94879B");

                    b.HasOne("BackendApi.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__UserI__4CA06362");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Models.Listing", b =>
                {
                    b.HasOne("BackendApi.Models.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Listings__UserID__3D5E1FD2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Models.ListingCategory", b =>
                {
                    b.HasOne("BackendApi.Models.CarCategory", "Category")
                        .WithMany("ListingCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__ListingCa__Categ__5DCAEF64");

                    b.HasOne("BackendApi.Models.Listing", "Listing")
                        .WithMany("ListingCategories")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__ListingCa__Listi__5CD6CB2B");

                    b.Navigation("Category");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("BackendApi.Models.ListingImage", b =>
                {
                    b.HasOne("BackendApi.Models.Listing", "Listing")
                        .WithMany("ListingImages")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__ListingIm__Listi__4316F928");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("BackendApi.Models.Location", b =>
                {
                    b.HasOne("BackendApi.Models.Listing", "Listing")
                        .WithMany("Locations")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__Locations__Listi__5629CD9C");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("BackendApi.Models.Message", b =>
                {
                    b.HasOne("BackendApi.Models.Listing", "Listing")
                        .WithMany("Messages")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__Listin__48CFD27E");

                    b.HasOne("BackendApi.Models.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__Receiv__47DBAE45");

                    b.HasOne("BackendApi.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__Sender__46E78A0C");

                    b.Navigation("Listing");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BackendApi.Models.UserReview", b =>
                {
                    b.HasOne("BackendApi.Models.User", "ReviewedUser")
                        .WithMany("UserReviewReviewedUsers")
                        .HasForeignKey("ReviewedUserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRevie__Revie__534D60F1");

                    b.HasOne("BackendApi.Models.User", "Reviewer")
                        .WithMany("UserReviewReviewers")
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRevie__Revie__52593CB8");

                    b.Navigation("ReviewedUser");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("BackendApi.Models.CarCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("ListingCategories");
                });

            modelBuilder.Entity("BackendApi.Models.Listing", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Favorites");

                    b.Navigation("ListingCategories");

                    b.Navigation("ListingImages");

                    b.Navigation("Locations");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BackendApi.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Listings");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("UserReviewReviewedUsers");

                    b.Navigation("UserReviewReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
